

.. _sphx_glr_auto_examples_twosite_plot_dop.py:


Parameter space result for the doped case
=========================================

In this case one solves the two site problem for all doping cases
at various local interaction values. The most prevalent differnce
is the behavior of the hybridization to the bath site.




.. rst-class:: sphx-glr-horizontal


    *

      .. image:: /auto_examples/twosite/images/sphx_glr_plot_dop_001.png
            :scale: 47

    *

      .. image:: /auto_examples/twosite/images/sphx_glr_plot_dop_002.png
            :scale: 47

    *

      .. image:: /auto_examples/twosite/images/sphx_glr_plot_dop_003.png
            :scale: 47

    *

      .. image:: /auto_examples/twosite/images/sphx_glr_plot_dop_004.png
            :scale: 47

    *

      .. image:: /auto_examples/twosite/images/sphx_glr_plot_dop_005.png
            :scale: 47

    *

      .. image:: /auto_examples/twosite/images/sphx_glr_plot_dop_006.png
            :scale: 47

    *

      .. image:: /auto_examples/twosite/images/sphx_glr_plot_dop_007.png
            :scale: 47





.. code-block:: python

    from __future__ import division, absolute_import, print_function
    import matplotlib.pyplot as plt
    import numpy as np
    from dmft.twosite_dop import dmft_loop_dop


    def doping_config(res, u, name):
        fig, axes = plt.subplots(3, sharex=True)
        axes[-1].set_xlabel('$<N>_{imp}$')
        fill = res[:, 0]
        axes[0].set_xlim([0, 1])
        e_c = [sim.e_c for sim in res[:, 1]]
        V = [sim.hyb_V() for sim in res[:, 1]]
        mu = [sim.mu for sim in res[:, 1]]
        for feat, ax, lab in zip([e_c, V, mu], axes, ['$\\epsilon_c$', 'V', '$\\mu$']):
            ax.plot(fill, feat, label=lab)
            ax.set_ylabel(lab)
        axes[0].set_title('Two site DMFT parameters at U={}'.format(u))
        fig.savefig(name + '_bathparam.png', format='png',
                    transparent=False, bbox_inches='tight', pad_inches=0.05)


    def plot_doping_param(axis='real', beta=1e3, u_int=[4.]):
        for u in u_int:
            out_file = axis + '_dop_b{}_U{}'.format(beta, u)
            try:
                res = np.load(out_file + '.npy')
            except IOError:
                res = dmft_loop_dop(u)
                np.save(out_file, res)

            doping_config(res, u, out_file)

    plot_doping_param(u_int=[2., 4., 5.85, 6., 8., 10., 100.])

**Total running time of the script:** ( 0 minutes  5.257 seconds)



.. container:: sphx-glr-footer


  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_dop.py <plot_dop.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_dop.ipynb <plot_dop.ipynb>`

.. rst-class:: sphx-glr-signature

    `Generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
